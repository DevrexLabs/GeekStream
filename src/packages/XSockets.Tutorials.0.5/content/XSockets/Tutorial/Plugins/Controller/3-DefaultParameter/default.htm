<html>
<head>
    <title>XSockets - WeAreTheRealTimeWeb</title>
    <script src="../../../Refs/Scripts/Prettify/prettify.js" type="text/javascript"></script>
    <link href="../../../Refs/Css/Prettify/prettify.css" rel="stylesheet" type="text/css" />
</head>
<body onload="prettyPrint()">
    <a href="../../../default.htm">Tutorial Index</a>
    <h1>
        Plugins / Controller / DefaultParameter</h1>
    <ul>
        <li><a href="../1-Basics/">../1-Basics</a> </li>
        <li><a href="../2-Debugging/">../2-Debugging/</a> </li>
        <li><a href="#">../3-DefaultParameter/</a> </li>
        <li><a href="../4-StronglyTyped/">../4-StronglyTyped/</a> </li>
        <li><a href="../5-Internal/">../5-Internal/</a> </li>
    </ul>
    <div>
        If you do not specify any parameters it will work just fine, but you can also use
        a default parameter to get information about the event and object sent.
    </div>
    <div>
        <h2>
            PreConditions</h2>
        <ol>
            <li>You have installed XSockets. <a href="../../../Basics/1-Setup/">Setup Example</a>
                or anything equal to this</li>
            <li>If you are NOT using the XSocketHandler project that is installed with XSockets
                <ul>
                    <li>See to it that the assembly get copied to the pluginfolder (see XSocketHandler postbuild
                        events)</li>
                </ul>
            </li>
        </ol>
        <h2>
            Code - Event with default parameter</h2>
        <ol>
            <li>Add a event "HelloWorld" that the server listens to.<br />
                By using the HandlerEvent you can tell the server what to listen for.
                <pre class="prettyprint">
//Export the IXBaseSocket interface so that the server can find the plugin
[Export(typeof(IXBaseSocket))]
//MetaData for knowing the unique alias and the buffersize
[XBaseSocketMetadata("DemoController", Constants.GenericTextBufferSize)]
//Inherit XBaseSocket to make it a plugin/controller
public class DemoController : XBaseSocket
{

    //We listen for events named 'HelloWorld' without any parameters 
    [HandlerEvent("HelloWorld")]
    public void MeHelloWorldMethod(IIncommingTextArgs e)
    {
        //We can now access the incomming event like this.
        //e.Data (contains the JSON representation sent to the server)
        //e.Event (the name of the event, HelloWorld in this case)
    }

    //This method is used by the XSocketFactory to avoid reflection on new connections.
    public override IXBaseSocket NewInstance()
    {
        return new DemoController();
    }
}
</pre>
            </li>
            <li>Create a connection (<a href="../../../Basics/2-Connecting/default.htm">example
                of connection</a>) to our new controller and calling the method.<br />
                <pre class="prettyprint">
var serverLocation = '127.0.0.1'; 
var protocol = 'ws';
var controller = 'DemoController';
var ws = new XSockets.WebSocket(protocol + "://" + serverLocation + "/" + controller, XSockets.WEBSOCKET);

ws.bind(XSockets.Events.open, function () {
    //We will send a message as soon as the connection is open.
    ws.trigger("HelloWorld",{});
});
</pre>
            </li>
        </ol>
        <b>NOTE: Read the next section <a href="../2-Debugging/default.htm">2-Debugging/</a>
            for knowing howto debug your plugins</b>
    </div>
</body>
</html>
