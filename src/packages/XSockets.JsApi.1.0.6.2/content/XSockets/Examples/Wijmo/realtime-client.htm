<!DOCTYPE html>
<html>
<head>
    <title>Wijmo/XSockets.NET - Display</title>
    <!--jQuery References-->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js" type="text/javascript"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jqueryui/1.8.18/jquery-ui.min.js"
        type="text/javascript"></script>
    <!--Theme-->
    <link href="http://cdn.wijmo.com/themes/aristo/jquery-wijmo.css" rel="stylesheet"
        type="text/css" title="rocket-jqueryui" />
    <!--Wijmo Widgets CSS-->
    <link href="http://cdn.wijmo.com/jquery.wijmo-complete.all.2.0.5.min.css" rel="stylesheet"
        type="text/css" />
    <!--Wijmo Widgets JavaScript-->
    <script src="http://cdn.wijmo.com/jquery.wijmo-open.all.2.0.5.min.js" type="text/javascript"></script>
    <script src="http://cdn.wijmo.com/jquery.wijmo-complete.all.2.0.5.min.js" type="text/javascript"></script>
    <script src="Refs/knockout-2.0.0.debug.js" type="text/javascript"></script>
    <script src="knockout-wijmo.js" type="text/javascript"></script>
    <script src="/Scripts/jXSockets.1.0.6.beta.js" type="text/javascript"></script>
    <script src="/Scripts/moment.min.js" type="text/javascript"></script>
    <script type="text/javascript">
        var State = {
            Live: 0,
            Recorded: 1,
            Paused: 2
        };

        //LineChart ViewModel
        var LineChartViewModel = function (header, label, arrLabels, arrValues) {
            var self = this;
            self.type = 'area';
            self.header = {
                visible: false,
                text: header,
                textStyle: {
                    fill: "#fafafa"
                }
            };
            self.axis = {
                y: {
                    labels: {
                        style: {
                            fill: '#7f7f7f',
                            'font-size': 11
                        }
                    },
                    gridMajor: {
                        style: { stroke: '#353539', 'stroke-dasharray': '- ' }
                    },
                    tickMajor: { position: 'outside', style: { stroke: '#7f7f7f'} },
                    tickMinor: { position: 'outside', style: { stroke: '#7f7f7f'} }
                },
                x: {
                    labels: {
                        style: {
                            fill: '#7f7f7f',
                            'font-size': 11,
                            rotation: -45
                        }
                    },
                    tickMajor: { position: 'outside', style: { stroke: '#7f7f7f'} }
                }
            };
            self.showChartLabels = false;
            self.hint = {
                content: function () {
                    return this.data.lineSeries.label + '\n' +
                        this.x + '\n' + this.y + '';
                },
                contentStyle: {
                    "font-size": 10
                },
                offsetY: -10
            };
            self.legend = {
                visible: false
            };
            self.stacked = ko.observable(false);
            self.seriesList = ko.observableArray(
                [{
                    label: label,
                    legendEntry: false,
                    data: {
                        x: ko.observableArray(arrLabels),
                        y: ko.observableArray(arrValues)
                    }
                }]);
            self.seriesStyles = [
                { stroke: "#ff9900", "stroke-width": 2 }
            ];
            self.seriesHoverStyles = [
                { "stroke-width": 2 }
            ];
        };

        //Create ViewModel
        var ViewModel = function (min, max, val, time) {
            var self = this;
            self.val = ko.observable(val);
            self.min = ko.observable(min);
            self.max = ko.observable(max);
            self.disabled = ko.observable(false);
            self.time = ko.observable(time);
            self.state = ko.observable(State.Live);
        };
        var Tank = new ViewModel(0, 100, 50, GetDateTimeNow());
        var Temp = new ViewModel(0, 100, 30, GetDateTimeNow());
        var TankHistory = null;
        var TempHistory = null;

        var ws = null;
        //Bind ViewModel
        $(document).ready(function () {

            ko.applyBindings(Tank, $("#TankArea")[0]);
            ko.applyBindings(Temp, $("#TempArea")[0]);

            //WebSocket
            ws = new XSockets.WebSocket("ws://127.0.0.1:4502/GenericText", "GenericText");

            ws.bind("OnTankUpdate", function (d) {
                Tank.val(d.val);
                Tank.time(d.time);
                Tank.state(d.state);
            });

            ws.bind("OnTempUpdate", function (d) {
                Temp.val(d.val);
                Temp.time(d.time);
                Temp.state(d.state);
            });

            ws.bind("OnTankTrend", function (d) {
                var labels = $.map(d, function (val, ix) {
                    return ix;
                });
                var values = $.map(d, function (value, ix) {
                    return value.val;
                });
                TankHistory = new LineChartViewModel('TankHistory', 'TankLevel', labels, values);
                ko.applyBindings(TankHistory, $("#TankHistoryArea")[0]);
            });

            ws.bind("OnTempTrend", function (d) {
                var labels = $.map(d, function (val, ix) {
                    return ix;
                });
                var values = $.map(d, function (value, ix) {
                    return value.val;
                });
                TempHistory = new LineChartViewModel('TempHistory', 'TempLevel', labels, values);
                ko.applyBindings(TempHistory, $("#TempHistoryArea")[0]);
            });
        });
        function GetDateTimeNow() {
            return moment().format('YYYY-MM-DD hh:mm:ss');
        };
    </script>
    <style type="text/css">
        
        h4.live {
            color: darkgreen;
            white-space: nowrap;
        }
        h4.recorded {
            color: darkred;
            -webkit-animation-direction: normal;
            -webkit-animation-duration: 1s;
            -webkit-animation-iteration-count: infinite;
            -webkit-animation-name: blink;
            -webkit-animation-timing-function: ease;   
            white-space: nowrap;
        }
        @-webkit-keyframes 'blink' {
            0% { color: rgba(255,0,0,0.6); }
            50% { color: rgba(255,0,0,0.3); }
            100% { color: rgba(255,0,0,1); }
        }
    </style>
</head>
<body style="font-size: 90%; font-family: verdana">
    <div id="TankArea">
        <div data-bind="With: Tank">
            <h4 class="live" data-bind="text: 'TankLevel (live) ' + time(), visible: state() == State.Live"></h4>
            <h4 class="recorded" data-bind="text: 'TankLevel (rec) ' + time(), visible: state() == State.Recorded"></h4>
            <div style="width: 317px;" data-bind="wijprogressbar: {value: val, minValue: min, maxValue: max, disabled: disabled}">
            </div>
            <div  data-bind="wijlineargauge: {orientation: 'horizontal', value: val, min: min, max: max, disabled: disabled, ranges: [{startWidth: 0.2, endWidth: 0.2, startValue: 0, endValue: 50, startDistance: 0.6, endDistance: 0.6, style: { fill: '#3F3', stroke: 'none'}},{startWidth: 0.2, endWidth: 0.2, startValue: 50, endValue: 80, startDistance: 0.6, endDistance: 0.6, style: { fill: '#f80', stroke: 'none'}} ,{startWidth: 0.2, endWidth: 0.2, startValue: 80, endValue: 100, startDistance: 0.6, endDistance: 0.6, style: { fill: '#f00', stroke: 'none'}}] }">
            </div>
        </div>
    </div>
    <div id="TankHistoryArea">
        <div data-bind="wijlinechart: {type: type,header: {text: header.text}, seriesList: seriesList, showChartLabels:showChartLabels,  seriesStyles:seriesStyles, seriesHoverStyles:seriesHoverStyles, legend:legend, hint:hint, axis:axis}" style="width:317px;height:250px;"></div>
    </div>
    <div id="TempArea">
        <div data-bind="With: Temp">
            <h4 class="live" data-bind="text: 'TempLevel (live) ' + time(), visible: state() == State.Live"></h4>
            <h4 class="recorded" data-bind="text: 'TempLevel (rec) ' + time(), visible: state() == State.Recorded"></h4>
            <div style="width: 317px;" data-bind="wijprogressbar: {value: val, minValue: min, maxValue: max, disabled: disabled}">
            </div>
            <div data-bind="wijlineargauge: {orientation: 'horizontal', value: val, min: min, max: max, disabled: disabled, ranges: [{startWidth: 0.2, endWidth: 0.2, startValue: 0, endValue: 50, startDistance: 0.6, endDistance: 0.6, style: { fill: '#3F3', stroke: 'none'}},{startWidth: 0.2, endWidth: 0.2, startValue: 50, endValue: 80, startDistance: 0.6, endDistance: 0.6, style: { fill: '#f80', stroke: 'none'}} ,{startWidth: 0.2, endWidth: 0.2, startValue: 80, endValue: 100, startDistance: 0.6, endDistance: 0.6, style: { fill: '#f00', stroke: 'none'}}] }">
            </div>
        </div>
    </div>
    <div id="TempHistoryArea">
        <div data-bind="wijlinechart: {type:type, header: {text: header.text}, seriesList: seriesList, showChartLabels:showChartLabels,  seriesStyles:seriesStyles, seriesHoverStyles:seriesHoverStyles, legend:legend, hint:hint, axis:axis}" style="width:317px;height:250px;"></div>
    </div>
</body>
</html>
