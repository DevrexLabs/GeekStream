<html>
<head>
    <title>XSockets - WeAreTheRealTimeWeb</title>
    <script src="../../Refs/Scripts/Prettify/prettify.js" type="text/javascript"></script>
    <link href="../../Refs/Css/Prettify/prettify.css" rel="stylesheet" type="text/css" />
</head>
<body onload="prettyPrint()">
    <a href="../../default.htm">Tutorial Index</a>
    <h1>
        Events</h1>
    <ul>
        <li><a href="../1-Setup/">../1-Setup</a> </li>
        <li><a href="../2-Connecting/">../2-Connecting/</a> </li>
        <li><a href="../3-Publish/">../3-Publish/</a> </li>
        <li><a href="../4-Subscribe/">../4-Subscribe/</a> </li>
        <li><a href="../5-Events/">../5-Events/</a> </li>
    </ul>
    <div>
        You can of course publish and subscribe to anything you want, but XSockets has a
        few builtin events to help you out.<br />
        You have already seen examples of this in <a href="../2-Connecting/">the connection
            example</a> where we used the "XSockets.Events.open" event</div>
    <div>
        <h2>
            Open (subscribe)</h2>
        <div>
            Lets you listen for the open event, like document ready in jQuery.
            <pre class="prettyprint">
ws.bind(XSockets.Events.open, function () {
    //Stuff here
});
</pre>
        </div>
        <h2>
            Close (subscribe)</h2>
        <div>
            Lets you listen for the close event.
            <pre class="prettyprint">
ws.bind(XSockets.Events.close, function () {
    //Stuff here
});
</pre>
        </div>
        <h2>
            OnError (subscribe)</h2>
        <div>
            Lets you listen for errors. This will catch exceptions thrown in the server, and
            you can trigger this event yourself from within the server. More about that in the
            serverside parts where we learn howto create custom plugins.
            <pre class="prettyprint">
ws.bind(XSockets.Events.onError, function (err) {
    //Stuff here
});
</pre>
        </div>
        <h2>
            Storage / Set (publish)</h2>
        <div>
            Push data to store into the server.
            <pre class="prettyprint">
ws.trigger(XSockets.Events.storage.set, {Key:'demo',Value:'qwerty'});
</pre>
        </div>
        <h2>
            Storage / Set (subscribe)</h2>
        <div>
            Subscribe on the set event for a specific key ('demo').
            <pre class="prettyprint">
ws.bind(XSockets.Events.storage.set + 'demo', function(data){
    //data will now contain {Key:'demo', Value:'qwerty'} if the example above is used
});
</pre>
        </div>
        <h2>
            Storage / Get (publish)</h2>
        <div>
            Publish data to store into the server.
            <pre class="prettyprint">
ws.trigger(XSockets.Events.storage.get, {Key:'demo'});
</pre>
        </div>
        <h2>
            Storage / Get (subscribe)</h2>
        <div>
            Subscribe on the get event for a specific key ('demo').
            <pre class="prettyprint">
ws.bind(XSockets.Events.storage.get + 'demo', function(data){
    //data will now contain {Key:'demo', Value:'qwerty'} if the example above is used
});
</pre>
        </div>
        <h2>
            Storage / GetAll (publish)</h2>
        <div>
            Publish to the server to get all items in the storage
            <pre class="prettyprint">
ws.trigger(XSockets.Events.storage.getAll, {});
</pre>
        </div>
        <h2>
            Storage / GetAll (subscribe)</h2>
        <div>
            Subscribe to the getAll event being triggered from teh server.
            <pre class="prettyprint">
ws.bind(XSockets.Events.storage.getAll, function (data) {
    //data will be a array of objects (key, value)
});
</pre>
        </div>
        <h2>
            Storage / Remove (publish)</h2>
        <div>
            Publich to the server to remove the value with key 'demo'
            <pre class="prettyprint">
ws.trigger(XSockets.Events.storage.remove, { Key: 'demo' });
</pre>
        </div>
        <h2>
            Storage / Remove (subscribe)</h2>
        <div>
            Subscribe to the removal of the Key 'demo' from the storage
            <pre class="prettyprint">
ws.bind(XSockets.Events.storage.remove + 'demo', function(){
    //data will now contain the removed obejct with {Key: 'demo', Value:'qwerty'} (if above example was used)
});
</pre>
        </div>
    </div>
</body>
</html>
