<html>
<head>
    <title>XSockets - WeAreTheRealTimeWeb</title>
    <script src="../../../Refs/Scripts/Prettify/prettify.js" type="text/javascript"></script>
    <link href="../../../Refs/Css/Prettify/prettify.css" rel="stylesheet" type="text/css" />
</head>
<body onload="prettyPrint()">
    <a href="../../../default.htm">Tutorial Index</a>
    <h1>
        Plugins / Controller / Internal
    </h1>
    <ul>
        <li><a href="../1-Basics/">../1-Basics</a> </li>
        <li><a href="../2-Debugging/">../2-Debugging/</a> </li>
        <li><a href="../3-DefaultParameter/">../3-DefaultParameter/</a> </li>
        <li><a href="../4-StronglyTyped/">../4-StronglyTyped/</a> </li>
        <li><a href="#">../5-Internal/</a> </li>
    </ul>
    <div>
        <b>NOTE: The Internal Plugin functionality will not be available until the next release
            of XSockets (v 1.0.4)</b> If you want to have some kind of longrunning task
        on the server that publish data you might choose to use the internal plugin. A plugin
        is made internal by setting the PluginRange property on the MetaData.
        <h3>
            Internal Controller Basics</h3>
        <ul>
            <li>Will only be created once. </li>
            <li>Will be created automatically by the server when it starts </li>
            <li>You can NOT connect to a internal controller </li>
        </ul>
        <h3>
            Internal Controller HowTo´s</h3>
        <ul>
            <li>To pass data to clients, use the external API to set up a connection to another
                controller. That way you can send data internally and the other controller will
                pass the data to clients listening. </li>
        </ul>
    </div>
    <div>
        <h2>
            PreConditions</h2>
        <ol>
            <li>You have installed XSockets. <a href="../../../Basics/1-Setup/">Setup Example</a>
                or anything equal to this</li>
            <li>If you are NOT using the XSocketHandler project that is installed with XSockets
                <ul>
                    <li>See to it that the assembly get copied to the pluginfolder (see XSocketHandler postbuild
                        events)</li>
                </ul>
            </li>
        </ol>
        <h2>
            Internal plugin</h2>
        If you do not know about serverside events, please read <a href="../1-Basics/">../1-Basics/</a>
        and <a href="../3-DefaultParameter/">../3-DefaultParameter/</a> This code will not
        show howto build a plugin, only howto use the strongly typed binding.
        <ol>
            <li>By passing the "PluginRange.Internal" to the XBaseSocketMetadata you will create
                a internal controller.
                <pre class="prettyprint">
[Export(typeof(IXBaseSocket))]
[XBaseSocketMetadata("InternalDemoController", Constants.GenericTextBufferSize, PluginRange.Internal)]
public class InternalDemoController : XBaseSocket
{
...
}
</pre>
            </li>
            <li>Example on howto send messages every 5 sec to another controller that will dispatch
                it to the clients<br />
                The ChatMessage class was created in the previous section <a href="../4-StronglyTyped/">
                    ../4-StronglyTyped/</a>
                <pre class="prettyprint">
[Export(typeof(IXBaseSocket))]
[XBaseSocketMetadata("InternalDemoController", Constants.GenericTextBufferSize, PluginRange.Internal)]
public class InternalDemoController : XBaseSocket
{
    private static WebSocket websocket;
    private static bool websocketConnected;
    static InternalDemoController()
    {
        //Using the external API to connect to XSockets
        websocket = new WebSocket("ws://127.0.0.1:4502/DemoController", string.Empty) { Origin = "http://xsockets.net" };
        websocket.OnOpen += new EventHandler(websocket_OnOpen);
        websocket.OnClose += new EventHandler(websocket_OnClose);
        websocket.Connect();
        ThreadPool.QueueUserWorkItem(Work, null);
    }

    static void websocket_OnClose(object sender, EventArgs e)
    {
        websocketConnected = false;
    }

    static void websocket_OnOpen(object sender, EventArgs e)
    {
        websocketConnected = true;
    }

    private static void Work(object state)
    {
        //Sending a chatmessage every 5 sec
        while (true)
        {
            var msg = new ChatMessage { UserName = "Uffe In Sweden", Message = "Hello World", When = DateTime.Now.ToLongTimeString() };
            if (websocketConnected)
                websocket.Trigger(msg.AsJsonEvent("ChatMessage"));
            Thread.Sleep(5000);
        }
    }

    public override IXBaseSocket NewInstance()
    {
        //No need to implement this since the Class will never be created more then once by MEF
        throw new NotImplementedException();
    }
}
</pre>
            </li>
        </ol>
        <b>NOTE: Read the next section <a href="../2-Debugging/default.htm">2-Debugging/</a>
            for knowing howto debug your plugins</b>
    </div>
</body>
</html>
